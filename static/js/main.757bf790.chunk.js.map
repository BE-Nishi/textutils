{"version":3,"sources":["logo.svg","Component/Navbar.js","Component/Textform.js","Component/Alert.js","Component/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","style","textDecoration","onClick","darkmode","htmlFor","secondarymode","greenmode","infomode","redmode","yellowmode","Textform","useState","text","setText","rows","value","onChange","e","target","showAlert","newText","toUpperCase","toLowerCase","copyText","document","getElementById","select","navigator","clipboard","writeText","rt","prompt","console","log","rtx","repeat","replace","trim","split","filter","Boolean","length","element","Alert","height","alert","class","role","word","lower","charAt","slice","capitalize","msg","About","color","backgroundColor","border","setMode","setBtnmode","App","setAlert","message","setTimeout","body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.757bf790.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  \r\n\r\n  return (\r\n    <>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className={`navbar-brand fw-bolder text-${props.mode==='light'?'black':'white'}`} to=\"/\">\r\n            {props.title}\r\n          </Link>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item mx-3\">\r\n                <Link className={`nav-a active text-${props.mode==='light'?'black':'white'}`} aria-current=\"page\" to=\"/\" style={{textDecoration: 'none'}}>\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className={`nav-a text-${props.mode==='light'?'black':'white'}`} to=\"/about\" style={{textDecoration: 'none'}}>\r\n                 About Us\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n            \r\n\r\n            <div className=\"dropdown\">\r\n              <button\r\n                className={`btn btn-outline-${props.mode==='light'?'light':props.mode} dropdown-toggle text-${props.mode==='light'?'black':'white'} bg-${props.mode==='light'?'light':props.mode}`}\r\n                type=\"button\"\r\n                id=\"dropdownMenuButton1\"\r\n                data-bs-toggle=\"dropdown\"\r\n                aria-expanded=\"false\"\r\n              >\r\n                Color Theme Mode\r\n              </button>\r\n              <ul className={`dropdown-menu bg-${props.mode==='light'?'light':props.mode}`} aria-labelledby=\"dropdownMenuButton1\">\r\n                <li>\r\n                  <Link className={`dropdown-item text-${props.mode==='light'?'black':'white'}`} to=\"\">\r\n                    <div className=\"form-check form-switch\" onClick={props.darkmode}>\r\n                      <input\r\n                        className=\"form-check-input\"\r\n                        type=\"checkbox\"\r\n                        id=\"c1\"\r\n                      />\r\n                      <label\r\n                        className=\"form-check-label\"\r\n                        htmlFor=\"flexSwitchCheckDefault\"\r\n                      >\r\n                        Dark Mode\r\n                      </label>\r\n                    </div>\r\n                  </Link>\r\n                </li>\r\n                <li>\r\n                  <Link className={`dropdown-item text-${props.mode==='light'?'black':'white'}`} to=\"#\" onClick={props.secondarymode}>\r\n                    <div className=\"form-check form-switch\">\r\n                      <input\r\n                        className=\"form-check-input\"\r\n                        type=\"checkbox\"\r\n                        id=\"flexSwitchCheckDefault\"\r\n                      />\r\n                      <label\r\n                        className=\"form-check-label\"\r\n                        htmlFor=\"flexSwitchCheckDefault\"\r\n                      >\r\n                        Gray Mode\r\n                      </label>\r\n                    </div>\r\n                  </Link>\r\n                </li>\r\n                <li>\r\n                  <Link className={`dropdown-item text-${props.mode==='light'?'black':'white'}`} to=\"#\" onClick={props.greenmode}>\r\n                    <div className=\"form-check form-switch\">\r\n                      <input\r\n                        className=\"form-check-input\"\r\n                        type=\"checkbox\"\r\n                        id=\"flexSwitchCheckDefault\"\r\n                      />\r\n                      <label\r\n                        className=\"form-check-label\"\r\n                        htmlFor=\"flexSwitchCheckDefault\"\r\n                      >\r\n                        Green Mode\r\n                      </label>\r\n                    </div>\r\n                  </Link>\r\n                </li>\r\n              \r\n              \r\n                <li>\r\n                  <Link className={`dropdown-item text-${props.mode==='light'?'black':'white'}`} to=\"#\" onClick={props.infomode}>\r\n                    <div className=\"form-check form-switch\">\r\n                      <input\r\n                        className=\"form-check-input\"\r\n                        type=\"checkbox\"\r\n                        id=\"flexSwitchCheckDefault\"\r\n                      />\r\n                      <label\r\n                        className=\"form-check-label\"\r\n                        htmlFor=\"flexSwitchCheckDefault\"\r\n                      >\r\n                        Teal Mode\r\n                      </label>\r\n                    </div>\r\n                  </Link>\r\n                </li>\r\n              \r\n              \r\n                <li>\r\n                  <Link className={`dropdown-item text-${props.mode==='light'?'black':'white'}`} to=\"#\" onClick={props.redmode}>\r\n                    <div className=\"form-check form-switch\">\r\n                      <input\r\n                        className=\"form-check-input\"\r\n                        type=\"checkbox\"\r\n                        id=\"flexSwitchCheckDefault\"\r\n                      />\r\n                      <label\r\n                        className=\"form-check-label\"\r\n                        htmlFor=\"flexSwitchCheckDefault\"\r\n                      >\r\n                        Red Mode\r\n                      </label>\r\n                    </div>\r\n                  </Link>\r\n                </li>\r\n              \r\n              \r\n                <li>\r\n                  <Link className={`dropdown-item text-${props.mode==='light'?'black':'white'}`} to=\"#\" onClick={props.yellowmode}>\r\n                    <div className=\"form-check form-switch\">\r\n                      <input\r\n                        className=\"form-check-input\"\r\n                        type=\"checkbox\"\r\n                        id=\"flexSwitchCheckDefault\"\r\n                      />\r\n                      <label\r\n                        className=\"form-check-label\"\r\n                        htmlFor=\"flexSwitchCheckDefault\"\r\n                      >\r\n                        Yellow Mode\r\n                      </label>\r\n                    </div>\r\n                  </Link>\r\n                </li>\r\n              \r\n              \r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    \r\n     \r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Textform(props) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleChange = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n  const convertUppercase = () => {\r\n      if(text === \"\" || text== null){\r\n        props.showAlert(\"Please enter some text\", \"danger\")\r\n      }\r\n      else{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\", \"success\")\r\n      }\r\n    \r\n  };\r\n  const convertLowercase = () => {\r\n    if(text === \"\" || text== null){\r\n        props.showAlert(\"Please enter some text\", \"danger\")\r\n      }\r\n      else{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\", \"success\")\r\n\r\n      }\r\n   \r\n  };\r\n  const toCopy = () => {\r\n      if(text === \"\" || text== null){\r\n        props.showAlert(\"Please enter some text\", \"danger\")\r\n      }\r\n      else{\r\n    let copyText = document.getElementById(\"myInput\");\r\n    copyText.select();\r\n    navigator.clipboard.writeText(copyText.value);\r\n    props.showAlert(\"Text Copied\", \"success\")\r\n      }\r\n  };\r\n\r\n  const toRepeat = () => {\r\n    if(text === \"\" || text== null){\r\n        props.showAlert(\"Please enter some text\", \"danger\")\r\n      } else {\r\n      let rt = prompt(\"Enter how many times you want to repeat the word\");\r\n      console.log(rt);\r\n      let rtx = text.repeat(rt);\r\n      setText(rtx);\r\n      props.showAlert(\"Text Repeated\", \"success\")\r\n\r\n    }\r\n  };\r\n\r\n\r\n  const removeExtraSpaces = () => {\r\n    if(text === \"\" || text== null){\r\n        props.showAlert(\"Please enter some text\", \"danger\")\r\n      }else{\r\n        let newText = text.replace(/\\s+/g, ' ').trim()\r\n        setText(newText)\r\n        props.showAlert(\"Extra spaces removed\", \"success\")\r\n\r\n      }\r\n  \r\n  };\r\n\r\n  const clearText = () => {\r\n    setText(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n     <div className=\"container my-2\"> \r\n      <h2\r\n        className={`text-${\r\n          props.mode === \"light\" ||\r\n          props.mode === \"success\" ||\r\n          props.mode === \"info\" ||\r\n          props.mode === \"warning\"\r\n            ? \"black\"\r\n            : \"white\"\r\n        }`}\r\n      >\r\n        Enter your text here\r\n      </h2>\r\n      <div className=\"mb-3 my-3\">\r\n        <textarea\r\n          className={`form-control mb-2 bg-${props.mode} text-${\r\n            props.mode === \"light\" ? \"black\" : \"white\"\r\n          }`}\r\n          id=\"myInput\"\r\n          rows=\"7\"\r\n          value={text}\r\n          onChange={handleChange}\r\n        ></textarea>\r\n\r\n        <button\r\n          type=\"button\"\r\n          className={`btn btn-outline-${props.mode} m-1 text-${\r\n            props.mode === \"dark\" ||\r\n            props.mode === \"secondary\" ||\r\n            props.mode === \"danger\"\r\n              ? \"white\"\r\n              : \"black\"\r\n          }`}\r\n          onClick={convertUppercase}\r\n        >\r\n          Uppercase\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className={`btn btn-outline-${props.mode} m-1  text-${\r\n            props.mode === \"dark\" ||\r\n            props.mode === \"secondary\" ||\r\n            props.mode === \"danger\"\r\n              ? \"white\"\r\n              : \"black\"\r\n          }`}\r\n          onClick={convertLowercase}\r\n        >\r\n          Lowercase\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className={`btn btn-outline-${props.mode} m-1 text-${\r\n            props.mode === \"dark\" ||\r\n            props.mode === \"secondary\" ||\r\n            props.mode === \"danger\"\r\n              ? \"white\"\r\n              : \"black\"\r\n          }`}\r\n          onClick={toCopy}\r\n        >\r\n          Copy to Clipboard\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className={`btn btn-outline-${props.mode} mx-1 text-${\r\n            props.mode === \"dark\" ||\r\n            props.mode === \"secondary\" ||\r\n            props.mode === \"danger\"\r\n              ? \"white\"\r\n              : \"black\"\r\n          }`}\r\n          onClick={toRepeat}\r\n        >\r\n          Repeat\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className={`btn btn-outline-${props.mode} m-1 text-${\r\n            props.mode === \"dark\" ||\r\n            props.mode === \"secondary\" ||\r\n            props.mode === \"danger\"\r\n              ? \"white\"\r\n              : \"black\"\r\n          }`} onClick={removeExtraSpaces}\r\n        >\r\n       Remove Extra Spaces\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className={`btn btn-outline-${props.mode} m-1 text-${\r\n            props.mode === \"dark\" ||\r\n            props.mode === \"secondary\" ||\r\n            props.mode === \"danger\"\r\n              ? \"white\"\r\n              : \"black\"\r\n          }`}\r\n          onClick={clearText}\r\n        >\r\n          Clear Text\r\n        </button>\r\n      </div>\r\n\r\n      <p className={`text-${\r\n          props.mode === \"light\" ||\r\n          props.mode === \"success\" ||\r\n          props.mode === \"info\" ||\r\n          props.mode === \"warning\"\r\n            ? \"black\"\r\n            : \"white\"\r\n        }`}>Number of Words : <b>{text.split(/\\s+/).filter(Boolean).length}</b></p>\r\n\r\n      <p className={`text-${\r\n          props.mode === \"light\" ||\r\n          props.mode === \"success\" ||\r\n          props.mode === \"info\" ||\r\n          props.mode === \"warning\"\r\n            ? \"black\"\r\n            : \"white\"\r\n        }`}>Number of Letters : <b>{text.length}</b></p>\r\n\r\n     \r\n      <p className={`text-${\r\n          props.mode === \"light\" ||\r\n          props.mode === \"success\" ||\r\n          props.mode === \"info\" ||\r\n          props.mode === \"warning\"\r\n            ? \"black\"\r\n            : \"white\"\r\n        }`}>Number of Sentences : <b>{text.split(/[.?!]+/).filter(Boolean).length}</b>\r\n        </p>\r\n      <p className={`text-${\r\n          props.mode === \"light\" ||\r\n          props.mode === \"success\" ||\r\n          props.mode === \"info\" ||\r\n          props.mode === \"warning\"\r\n            ? \"black\"\r\n            : \"white\"\r\n        }`}>Number of Lines : <b>{text.split(/\\r\\n|\\r|\\n/).filter((element)=>{ return element.length!==0}).length}</b>\r\n        </p>\r\n      <p className={`text-${\r\n          props.mode === \"light\" ||\r\n          props.mode === \"success\" ||\r\n          props.mode === \"info\" ||\r\n          props.mode === \"warning\"\r\n            ? \"black\"\r\n            : \"white\"\r\n        }`}>\r\n        Average Time Required to Read Above Text : <b>{0.00333333333 * text.split(\" \").length}</b>\r\n      </p>\r\n      <p className={`text-${\r\n          props.mode === \"light\" ||\r\n          props.mode === \"success\" ||\r\n          props.mode === \"info\" ||\r\n          props.mode === \"warning\"\r\n            ? \"black\"\r\n            : \"white\"\r\n        }`}>\r\n            Preview\r\n            </p>\r\n      <div className={`container shadow-sm p-3 mb-5 bg-body rounded text-${\r\n          props.mode\r\n            ? \"black\"\r\n            : \"white\"\r\n        }`}>\r\n        {text}\r\n      </div>\r\n    </div>\r\n    </>\r\n\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>{\r\n        let lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() +lower.slice(1) \r\n    }\r\n    \r\n    return (\r\n        <div style={{height:\"50px\"}}>\r\n          {      props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\" >\r\n    <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n    </div>}\r\n </div>\r\n            \r\n\r\n      \r\n          \r\n       \r\n    )\r\n}\r\n","import React, {useState} from \"react\";\r\n\r\nexport default function About() {\r\n    const [mode, setMode] = useState({\r\n        color : \"black\",\r\n        backgroundColor :\"white\",\r\n        border : \"1px solid black\"\r\n      \r\n      }) ;\r\n    const [btnmode, setBtnmode] = useState(\"Enable Dark Mode\");\r\n\r\n  const toggelMode = () =>{\r\n    if(mode.color === \"black\"){\r\n      setMode({\r\n        color : 'white',\r\n    backgroundColor :\"black\",\r\n    border : \"1px solid white\"\r\n      })\r\n      setBtnmode(\"Enable White Mode\");\r\n    }\r\n    else{\r\n      setMode({\r\n        color : 'black',\r\n    backgroundColor :\"white\",\r\n    border : \"1px solid black\"\r\n      })\r\n      setBtnmode(\"Enable Dark Mode\");\r\n    }\r\n    console.log(\"togglecase\")\r\n  }\r\n  return (\r\n    \r\n\r\n      <div className=\"container my-3\">\r\n      <h2 className=\"container my-2\">About Us</h2>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n          <div className=\"accordion-item\" style = {mode}>\r\n            <h2 className=\"accordion-header\" id=\"headingOne\" >\r\n              <button\r\n              style = {mode}\r\n                className=\"accordion-button\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseOne\"\r\n                aria-expanded=\"true\"\r\n                aria-controls=\"collapseOne\"\r\n              >\r\n                Accordion Item #1\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseOne\"\r\n              className=\"accordion-collapse collapse show\"\r\n              aria-labelledby=\"headingOne\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\">\r\n                <strong>This is the first item's accordion body.</strong> It is\r\n                shown by default, until the collapse plugin adds the appropriate\r\n                classes that we use to style each element. These classes control\r\n                the overall appearance, as well as the showing and hiding via\r\n                CSS transitions. You can modify any of this with custom CSS or\r\n                overriding our default variables. It's also worth noting that\r\n                just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\" style = {mode}>\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n              <button \r\n              style = {mode}\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseTwo\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseTwo\"\r\n              >\r\n                Accordion Item #2\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseTwo\"\r\n              className=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingTwo\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style = {mode}>\r\n                <strong>This is the second item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classes that we use to style each element. These\r\n                classes control the over any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\" style = {mode}>\r\n            <h2 className=\"accordion-header\" id=\"headingThree\">\r\n              <button\r\n               style = {mode}\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseThree\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseThree\"\r\n              >\r\n                Accordion Item #3\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseThree\"\r\n              className=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingThree\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style = {mode}>\r\n                <strong>This is the third item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classes that we use to style each element. These\r\n                classes control the overall appearance, as well as the showing\r\n                and hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      <button className=\"btn btn-primary my-3\"   onClick = {toggelMode}> Enable Dark Mode</button>\r\n      </div>\r\n\r\n  );\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './Component/Navbar';\nimport Textform from './Component/Textform';\nimport React, { useState } from 'react'\nimport Alert from './Component/Alert';\nimport About from './Component/About';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  \n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) =>{\n    setAlert({\n      msg : message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n\n  }\n  \n  const darkMode = () =>{\n    \n  if(mode === \"light\"){\n      setMode('dark');\n      document.body.style.backgroundColor = '#0d0d0d';\n      showAlert(\"Dark mode is set\", \"success\")\n    }\n   else{\n     setMode('light')\n     document.body.style.backgroundColor = 'white'\n\n     showAlert(\"Light mode is set\", \"success\")\n      }\n  }\n  const secondaryMode = () => {\n    if(mode === \"light\"){\n      setMode('secondary');\n      document.body.style.backgroundColor = '#a6a6a6'\n      showAlert(\"Gray mode is set\", \"success\")\n    }\n     else{\n       setMode('light')\n       document.body.style.backgroundColor = 'white'\n       showAlert(\"Light mode is set\", \"success\")\n           }\n  }\n  const greenMode = () => {\n    if(mode === \"light\"){\n      setMode('success');\n      document.body.style.backgroundColor = '#ccffdd'\n      showAlert(\"Green mode is set\", \"success\")\n    }\n     else{\n       setMode('light')\n       document.body.style.backgroundColor = 'white'\n       showAlert(\"Light mode is set\", \"success\")\n      }\n  }\n  const infoMode = () => {\n    if(mode === \"light\"){\n      setMode('info');\n      document.body.style.backgroundColor = '#ccffff'\n      showAlert(\"Teal mode is set\", \"success\")\n    }\n     else{\n       setMode('light')\n       document.body.style.backgroundColor = 'white'\n       showAlert(\"Light mode is set\", \"success\")\n     }\n  }\n  const redMode = () => {\n    if(mode === \"light\"){\n      setMode('danger');\n      document.body.style.backgroundColor = '#ff6666'\n      showAlert(\"Red mode is set\", \"success\")\n    }\n     else{\n       setMode('light')\n       document.body.style.backgroundColor = 'white'\n       showAlert(\"Light mode is set\", \"success\")\n     }\n  }\n  const yelloMode = () => {\n    if(mode === \"light\"){\n      setMode('warning');\n      document.body.style.backgroundColor = '#ffe680'\n      showAlert(\"Yellow mode is set\", \"success\")\n    }\n     else{\n       setMode('light')\n       document.body.style.backgroundColor = 'white'\n       showAlert(\"Light mode is set\", \"success\")\n     }\n  }\n \n  return (\n    \n   <>\n <Router>\n <Navbar title=\"TextUtils\" mode={mode}  darkmode={darkMode} secondarymode={secondaryMode} greenmode={greenMode} infomode={infoMode} redmode={redMode} yellowmode={yelloMode}/>\n   \n   \n   <Alert alert={alert}/>     \n            <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          \n          <Route path=\"/\">\n          <Textform mode={mode} showAlert={showAlert}/>\n          </Route>\n        </Switch>\n </Router>\n   \n           \n          \n     \n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}